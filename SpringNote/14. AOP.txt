1. Intro
    1) 여러 메서드에 공통 코드를 추가해야 하는 경우
        - 공통 코드의 분리
    2) (부가기능)코드를 자동으로 (핵심기능에) 추가한다면 어디에 가능한가?
        - Before 
        - After
        - Around

2. AOP (Aspect Oriented Programming)
    1) 관점 지향 프로그래밍
    2) 관심의 분리 (Separation of Concerns)
        - 핵심관심모듈
            - 핵심 기능 (Core Concerns)
                - 업무(Biz) 로직을 포함하는 기능
                - 예) 계좌이체, 입출금, 이자계산,....
        - 보조(횡단)관심모듈 (cross cutting concerns)
            - 핵심기능을 도와주는 부가적인 기능
                - 부가 기능(advice)을 동적으로 추가해주는 기술
                - 예) 보안(Security), 로깅(Logging), 트랜잭션(Transaction),.....

        - AOP가 핵심관심모듈의 코드를 직접 건드리지 않고 
          필요한 기능이 동작하도록 하는 것 => 위빙(Weaving) 이라고 하는 특수한 작업이 필요함
        - AOP에서 위빙 작업을 통해 핵심모듈 사이 사이에 필요한 횡단 관심코드가 동작하도록 엮어지게 만듦
    
    3) AOP는 OOP를 더욱 OOP답게 만들어 줄 수 있음
        - 객체지향의 기본 원칙을 적용하여도 핵심기능에서 부가기능을 분리해서 모듈화하는 것은 매우 어려움
    
    4) 소프트웨어 재사용 방안중 하나임

    5) AOP는 애플리케이션 로직을 담당하는 코드에 부가 관련 코드를 분리해서 
       별도의 모듈로 관리하게 해주는 강력한 기술임

3. AOP 용어
    1) Target(타겟)
        - 핵심기능을 담고 있는 모듈
        - 타겟은 부가기능을 부여할 대상이 됨
        - advice가 추가될 객체

    2) Advice(어드바이스)
        - 타겟에 제공할 부가기능을 담고 있는 모듈
        - target에 동적으로 추가될 부가 기능(모듈)
    
    3) Join Point(조인 포인트)
        - 어드바이스가 적용될 수 있는 위치
        - 타겟 객체가 구현한 인터페이스의 모든 메서드는 조인 포인트가 됨
        - advice가 추가(join)될 대상(메서드)

    4) Pointcut(포인트 컷)
        - 어드바이스를 적용할 타겟의 메서드를 선별하는 정규표현식
        - 포인트컷 표현식은 execution으로 시작함
          메서드의 Signature를 비교하는 방법을 주로 이용함
            - execution(* shop.house.*.*(..))
        - join point들을 정의한 패턴

    5) Aspect(애스펙트)
        - Advice + Pointcut
        - 어드바이스 + 포인트 컷 = 애스펙트
        - 부가 기능을 정의한 코드인 어드바이스(advice)와
          어드바이스 어디에 적용할지를 결정하는 포인트컷(Pointcut)을 합친 개념
        - 애스팩트는 AOP의 기본 모듈임
        - 애스펙트는 싱글톤 형태의 객체로 존재함