1. 프레임워크 (Framework)
    1) 응용 프로그램, 애플리케이션을 효율적으로 구현하기 위해 필요한 설정을 미리 작성하여 모아둔 툴, 규칙
    2) 예
        - 자동차 운전, 핸들 왼쪽으로 돌리면 차량이 왼쪽으로 움직임
    3) 스프링 프레임워크
        - 애플리케이션 구현에 필요한 설정을 미리 작성하여 
          개발자는 비지니스 로직에 집중할 수 있도록 도와줌

2. 스프링의 핵심 개념
    1) 의존성 주입(DI)
    2) IoC 컨테이너
    3) AOP
    4) 빈 (Bean)

3. 스프링 빈 (Bean)
    1) 스프링 프레임워크에서 관리되는 자바 객체
    2) history
        - 재사용 가능한 컴포넌트
        - Servlet & JSP bean
            - MVC의 Model, EL, scope
        - EJB (Enterprise Java Bean)
            - 복잡한 규칙
        - Spring Bean
            - POJO (Plain Old Java Object), 단순한구조, 독립적, Spring Container가 관리  
    3) Bean & BeanFactory
        - Bean : Spring Container가 관리하는 객체
        - Spring Container : Bean 저장소, Bean을 저장, 관리(생성, 소멸, 연결)
            - BeanFactory : Bean을 생성, 연결 등의 기본 기능 정의
            - Application Context : BeanFactory를 확장해서 여러 기능을 추가 정의  
                - 다양한 종류의 ApplicationContext 구현체를 제공
                    - 종류
                                        XML                            Java Config
                    non-web     GenericXmlApplicationContext    AnnotationConfigApplicationContext
                      web       XmlWebApplicationContext        AnnotationConfigWebApplicationContext

    4) AC의 설정 파일
        - web.xml
            - root-context.xml : new XmlWebApplicationContext() - 부모AC
                <context-param>
		            <param-name>contextConfigLocation</param-name>
		            <param-value>/WEB-INF/spring/root-context.xml</param-value>
	            </context-param>

            - servlet-context.xml : new XmlWebApplicationContext() - 자식AC
                <servlet>
		            <servlet-name>appServlet</servlet-name>
		            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		            <init-param>
			            <param-name>contextConfigLocation</param-name>
			            <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		            </init-param>
		            <load-on-startup>1</load-on-startup>
	            </servlet>

        - ROOT AC와 Sevlet AC
            - 자식 AC를 등록된 빈을 찾은 후 부모 AC를 찾음
            - 부모 AC는 공통으로 사용하는 Bean을 등록
            - 자식 AC는 개별적으로 사용하는 Bean을 등록

4. 빈의 초기화
    1) src/main/resouces에 파일 생성
    2) 빈(Bean)의 생성과 초기화
        - <bean>을 이용해서 빈을 생성할 수 있음
            - id와 class 속성을 가짐
                - id : 빈을 가리키는 레퍼런스 변수 이름을 명시함
                - class : 클래스 이름을 명시함
            
            - 기존 객체 생성 방법
                - Car car = new Car();
            - IoC 컨테이너에서 객체 생성 방법
                - <bean id="" class="" />

        - <property>를 이용한 빈 초기화
            - 필드 초기화 할 수 있음
                - setter()를 이용
            - name 속성에 필드 이름 명시함
            - 데이터 타입이 배열인 경우
                - <array>를 이용해서 값을 명시함

5. @Autowired
    1) 스프링 DI 애너테이션
    2) 적용 대상
        - 인스턴스 변수 (iv)
        - setter
        - 메서드
        - (참조형 매개변수를 가진) 생성자
    3) 의존성 주입(DI) 방법
        - 필드 선언 방법
        - 세터(setter) 메서드 방식
        - 생성자 방식
            - 스프링 공식 권장 방식

6. IoC (Inversion of Control, 제어의 역전)
    1) Don't call us, we will call you
            ** 라이브러리 : 내가 주체가 되어 라이브러리를 활용
            ** 프레임워크 : 프레임워크가 주체가 되어 내 코드를 활용
    2) IoC
        - DL (의존성 검색)
        - DI (의존성 주입)
            - setter Injection
            - Field Injection
            - Constructor Injection



7. 의존성 주입 (DI)
    1) 인스턴스의 생성과 의존 관계를 소스 코드가 아닌
       IoC 컨테이너가 하는 소프트웨어 디자인 패턴 중 하나임

    2) 스프링 컨테이너에 Bean을 미리 생성해두고,
       해당 Bean이 필요한 객체에 스프링 컨테이너가 주입하는 방식
    3) 예
        - 회원 가입 프로세스 구현
            - 처리흐름
                - 회원 가입으로 등록하려고 하는 사용자가 이미 DB에 등록되어 있는지 확인
                - 등록이 되어 있지 않다면 사용자 정보를 저장
                - 등록이 되어 있다면 예외를 던짐

8. Bean은 IoC 컨테이너가 관리
    1) IoC 컨테이너 : 인스턴스 생성, 의존 관계 설정, 빈 제공
       빈 (Bean) : 스프링 IoC 컨테이너에 의해 관리되는 자바 객체
       AppliactionContext(AC)가 컨테이너 역할을 수행함
    2) 개발자  -----------------------------> UserServiceImple <------------------------ IoC 컨테이너
                    직접 주입 X

9. @Resource
    1) Spring Container에서 이름으로 빈을 검색해서 참조변수에 자동 주입(DI)
    2) 일치하는 이름의 빈이 없으면 예외 발생함

10. @Component
    1) <context:component-scan>로 @Component가 클래스를 자동 검색해서 빈으로 등록
    2) @Controller, @Service, @Repository, @ControllerAdvice의 메타 애너테이션

11. Bean 설정 방법
    1) 자바 기반 설정 방식 (Java-based Configuration)
        - 자바 클래스에 @Configuration 어노테이션 사용
        - 메소드에 @Bean 어노테이션
        - 스프링 프레임워크 3.0부터 사용 가능
    2) XML 기반 설정 방식 (XML-based Configuration)
        - <bean> 요소의 class에 기술
        - <property> 요소를 사용해 의존성 주입
        - 스프링 프레임워크 1.0부터 사용 가능
        - 최근에는 사용하지 않는 추세
    3) 어노테이션 기반 설정 방식 (Annotation-based Configuration)
        - @Component, @Service와 같은 어노테이션이 부여된 클래스를  탐색(ComponentScan)하여 IoC 컨테이너에 Bean을 자동으로 등록
            - 어플리케이션이 시작될 때, 해당 어노테이션이 부여된 클래스를 탐색함
        - 스프링 프레임워크 2.5부터 사용 가능
        - 의존성 주입 역시 IoC 컨테이너가 자동으로 주입을 하게 됨
            - 이런 주입 과정을 AutoWiring(오토와이어링) 이라고 함
                - @Autowired 
                - @Qualifier 활용해서 빈 이름을 지정하고 원하는 빈만 선택해서 사용 가능